流复制异步同步性能测试
一、环境准备
1.	主库参数设置
wal_level = replica
archive_mode = on
archive_command = 'test ! -f /data01/pgsql/archivedir/%f && cp %p /data01/pgsql/archivedir/%f'
hot_standby=on
restore_command='cp /data01/pgsql/archivedir/%f %p'
异步
alter system set  synchronous_standby_names='';
alter system set  synchronous_commit='remote_write';
select pg_reload_conf();

同步
alter system set  synchronous_standby_names='pg81';
alter system set  synchronous_commit='remote_write';
select pg_reload_conf();

2.	备库设置
alter system set primary_conninfo='/home/postgres/.pgpass  channel_binding=disable host=10.28.152.60 port=5432 sslmode=disable sslcompression=0 sslsni=1 ssl_min_protocol_version=TLSv1.2 gssencmode=disable krbsrvname=postgres target_session_attrs=any application_name=pg81';
3.	流复制
pg_basebackup -F p -X stream -v -P -h 10.28.152.60 -p 5432 -U replica -D $PGDATA -R -C --slot pg81


二、测试用例
1.	测试表
create table user_info  
(userid int,  
engname text,  
cnname text,  
occupation text,  
birthday date,  
signname text,  
email text,  
qq numeric,  
crt_time timestamp without time zone,  
mod_time timestamp without time zone  
);  
  
create table user_session  
(userid int,  
logintime timestamp(0) without time zone,  
login_count bigint default 0,  
logouttime timestamp(0) without time zone,  
online_interval interval default interval '0'  
);  
  
create table user_login_rec  
(userid int,  
login_time timestamp without time zone,  
ip inet  
);  
  
create table user_logout_rec  
(userid int,  
logout_time timestamp without time zone,  
ip inet  
);  
2.	初始化数据
insert into user_info (userid,engname,cnname,occupation,birthday,signname,email,qq,crt_time,mod_time)  
select generate_series(1,20000000),  
'digoal.zhou',  
'德哥',  
'DBA',  
'1970-01-01'  
,E'公益是一辈子的事, I\'m Digoal.Zhou, Just do it!',  
'digoal@126.com',  
276732431,  
clock_timestamp(),  
NULL;  
  
insert into user_session (userid) select generate_series(1,20000000);  
  
alter table user_info add constraint pk_user_info primary key (userid);  
alter table user_session add constraint pk_user_session primary key (userid);  
3.	业务函数
create or replace function f_user_login   
(i_userid int,  
OUT o_userid int,  
OUT o_engname text,  
OUT o_cnname text,  
OUT o_occupation text,  
OUT o_birthday date,  
OUT o_signname text,  
OUT o_email text,  
OUT o_qq numeric  
)  
as $BODY$  
declare  
begin  
select userid,engname,cnname,occupation,birthday,signname,email,qq  
into o_userid,o_engname,o_cnname,o_occupation,o_birthday,o_signname,o_email,o_qq  
from user_info where userid=i_userid;  
insert into user_login_rec (userid,login_time,ip) values (i_userid,now(),inet_client_addr());  
update user_session set logintime=now(),login_count=login_count+1 where userid=i_userid;  
return;  
end;  
$BODY$  
language plpgsql;  
4.	测试
使用pgbench进行压力测试, 发现瓶颈并合理优化

4.１.	pgbench用到的登陆脚本
cat login.sql
\set userid random(1,20000000)
select userid,engname,cnname,occupation,birthday,signname,email,qq from user_info where userid=:userid;
insert into user_login_rec (userid,login_time,ip) values (:userid,now(),inet_client_addr());
update user_session set logintime=now(),login_count=login_count+1 where userid=:userid;
  同步
 
 
4.1.1.	压力测试
pgbench -M prepared -r -c 8 -f /home/postgres/test/login.sql -j 8 -n -T 180 -h 127.0.0.1 -p 5432 -U postgres postgres
pgbench -M prepared -r -c 300 -j 300 -n -T 360 -h 10.28.152.60 -p 5432 -U postgres postgres

4.1.2.	压力测试结果
 

4.1.3.	瓶颈分析与优化
select pg_current_wal_insert_lsn(),* from pg_stat_replication;
 

压力测试中查看数据库服务器的iostat -x
 
异步
 
 

4.1.1.	压力测试
pgbench -M prepared -r -c 8 -f /home/postgres/test/login.sql -j 8 -n -T 180 -h 127.0.0.1 -p 5432 -U postgres postgres

4.1.2.	压力测试结果
 
4.1.3.	瓶颈分析与优化
select pg_current_wal_insert_lsn();
 

压力测试中查看数据库服务器的iostat -x  （  iostat -xh 2 90 ）
 

5总结

测试现场性能，请观察IO、CPU否是满足条件。

