SELECT * FROM ( SELECT c.connamespace::regnamespace::text as table_schema, c.conrelid::regclass::text as table_name, con.column_name, c.conname as constraint_name, pg_get_constraintdef(c.oid) FROM pg_constraint c JOIN pg_namespace ON pg_namespace.oid = c.connamespace JOIN pg_class ON c.conrelid = pg_class.oid LEFT JOIN information_schema.constraint_column_usage con ON c.conname = con.constraint_name AND pg_namespace.nspname = con.constraint_schema UNION ALL SELECT table_schema, table_name, column_name, NULL, 'NOT NULL' FROM information_schema.columns WHERE is_nullable = 'NO' ) all_constraints WHERE table_schema NOT IN ('pg_catalog', 'information_schema') ORDER BY table_schema, table_name, column_name, constraint_name ; 
SELECT
    conname AS constraint_name,
    contype AS constraint_type,
    pg_get_constraintdef(pg_constraint.oid) AS constraint_definition
FROM
    pg_constraint
    INNER JOIN pg_class ON pg_constraint.conrelid = pg_class.oid
WHERE
    pg_class.relname = 'your_table_name' AND contype != 'c';


select ns.nspname,
cl.relname as table_name,
cast(obj_description(cl.relfilenode,'pg_class') as varchar) as "表注释",
a.attname as column_name,
format_type(a.atttypid,a.atttypmod) as data_type,
(case when a.atttypmod-4>0 then a.atttypmod-4 else 0 end) data_length,
(case when (select count(*) from pg_constraint where conrelid = a.attrelid and conkey[1]=attnum and contype='p')>0 then 'Y' else '' end) as "主键约束",
(case when (select count(*) from pg_constraint where conrelid = a.attrelid and conkey[1]=attnum and contype='u')>0 then 'Y' else '' end) as "唯一约束",
(case when (select count(*) from pg_constraint where conrelid = a.attrelid and conkey[1]=attnum and contype='f')>0 then 'Y' else '' end) as "外键约束",
(case when a.attnotnull=true then 'Y' else '' end) as nullable,
col_description(a.attrelid,a.attnum) as comment
from pg_attribute a
inner join pg_class cl on a.attrelid=cl.oid
inner join pg_namespace ns on ns.oid = cl.relnamespace
where nspname not in ('pg_catalog','information_schema') and cl.relkind ='r' and format_type(a.atttypid,a.atttypmod) not in ('oid','cid','tid','xid')   
order by nspname,table_name,a.attnum;

SELECT
     tc.constraint_name, tc.table_name, kcu.column_name, 
     ccu.table_name AS foreign_table_name,
     ccu.column_name AS foreign_column_name,
     tc.is_deferrable,tc.initially_deferred
 FROM 
     information_schema.table_constraints AS tc 
     JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name
     JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name
 WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'your table name';
