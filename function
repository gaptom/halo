CREATE OR REPLACE FUNCTION pg_catalog.lpad(bigint, integer, varchar)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
SELECT pg_catalog.lpad($1::text, $2, $3::text)
$function$


 create or replace procedure get_actural_index_drop()
language plpgsql
as $$
  declare 
    cursor_sql record;
    i int:=0;
begin
for cursor_sql in(
SELECT
    n.nspname AS schemaname,
    i.relname AS indexname  
FROM pg_index x
    JOIN pg_class c ON c.oid = x.indrelid
    JOIN pg_class i ON i.oid = x.indexrelid
    LEFT JOIN pg_namespace n ON n.oid = c.relnamespace
    LEFT JOIN pg_tablespace t ON t.oid = i.reltablespace
WHERE (c.relkind = ANY (ARRAY['r'::"char", 'm'::"char"])) AND i.relkind = 'i'::"char" and n.nspname='infodba'
) loop
 execute 'drop index '||cursor_sql.schemaname||'.'||cursor_sql.indexname||'';
 i=i+1;
 raise notice '%',i;
 commit;
end loop;
end;
$$;
-----------------------------------------------------------------

CREATE OR REPLACE FUNCTION count_records_dynamically() RETURNS VOID AS $$
DECLARE
  cursor_sql RECORD;
  table_count INTEGER;
BEGIN
  FOR cursor_sql IN
    SELECT tablename FROM pg_tables WHERE schemaname = 'public' -- 可以更改为特定的模式或删除该过滤条件以包括所有模式的表
  LOOP
    EXECUTE 'SELECT COUNT(*) FROM ' || cursor_sql.tablename INTO table_count;
    INSERT INTO tmp_table_count (table_name, record_count) VALUES (cursor_sql.tablename, table_count);
  END LOOP;
END;
$$ LANGUAGE plpgsql;


create table TMP_GET_ACTURAL_TABLE_COUNT(table_name varchar(50),table_cnt int);
select * from TMP_GET_ACTURAL_TABLE_COUNT;

CREATE OR REPLACE PROCEDURE GET_ACTURAL_TABLE_COUNT(isrun integer) AUTHID CURRENT_USER IS 
  cursor_sql SYS_REFCURSOR;
  record_count number;
BEGIN
  FOR cursor_sql IN (SELECT table_name FROM user_tables ) LOOP
    EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM ' || cursor_sql.table_name INTO record_count;
    INSERT INTO TMP_GET_ACTURAL_TABLE_COUNT (table_name, table_cnt) VALUES (cursor_sql.table_name, record_count);
	  DBMS_OUTPUT.PUT_LINE('table '||cursor_sql.table_name || ':' ||record_count);
      COMMIT;
  END LOOP;
  COMMIT;
END;
--------------------------
CREATE OR REPLACE PROCEDURE compare_all_table_columns(
  
)
AS $$
DECLARE
  table_name VARCHAR;
  column_count1 INTEGER;
  column_count2 INTEGER;
  column_name1 VARCHAR;
  column_name2 VARCHAR;
BEGIN
  -- 获取 schema1 中所有表的信息
  FOR table_name IN (SELECT table_name FROM information_schema.tables WHERE table_schema = schema1) LOOP
    -- 获取表1的字段数量和字段名
    EXECUTE format('SELECT COUNT(*), column_name FROM information_schema.columns WHERE table_schema = %L AND table_name = %L GROUP BY column_name', schema1, table_name) INTO column_count1, column_name1;

    -- 获取表2的字段数量和字段名
    EXECUTE format('SELECT COUNT(*), column_name FROM information_schema.columns WHERE table_schema = %L AND table_name = %L GROUP BY column_name', schema2, table_name) INTO column_count2, column_name2;

    -- 比较字段数量
    IF column_count1 > column_count2 THEN
      RAISE NOTICE '表 % 格式字段数量不一致', table_name;
      CONTINUE;
    END IF;
	
	
	---获取表名、字段名等信息。插入表中

   
  END LOOP;
  ---添加列的信息
END;
$$ LANGUAGE plpgsql;

