tc日志
vi
查看0.001s
\v(0.[0-9]{3}|[1-9]\d*\.\d{0,3})\s+seconds
查看1S以上
/\v[1-9]\d*\.\d{0,3} seconds
查看2S以上
/\v(2\.\d{0,3}|[3-9]\d*\.\d{0,3}|\d{2,}\.\d{0,3}) seconds
查看3S以上
/\v(3\.\d{0,3}|[4-9]\d*\.\d{0,3}|\d{2,}\.\d{0,3}) seconds
查看10S以上
/\v(10\.\d{0,3}|[1-9][0-9]\d*\.\d{0,3}|\d{3,}\.\d{0,3}) seconds

vi
查看0.001以上
/\v(0.[0-9]{2}[1-9]|[1-9][0-9]*\.[0-9]{3,}|0.[0-9]{3})\s+secs
查看0.1 secs以上
/\v(0\.[1-9][0-9]{2,}|[1-9][0-9]*\.[0-9]{3,}) secs
查看1 secs以上
/\v[1-9]\d*\.\d{0,3} secs
查看2S以上
/\v(2\.\d{0,3}|[3-9]\d*\.\d{0,3}|\d{2,}\.\d{0,3}) secs
查看3S以上
/\v(3\.\d{0,3}|[4-9]\d*\.\d{0,3}|\d{2,}\.\d{0,3}) secs
查看10S以上
/\v(10\.\d{0,3}|[1-9][0-9]\d*\.\d{0,3}|\d{3,}\.\d{0,3}) secs

#!/usr/bin/perl
use strict;
use warnings;
use DateTime;
use POSIX qw(strftime);
use File::Copy "move";
# 指定目录路径
my $dir = '/pgdata/pgsql/log';
my $destion_dir = '/home/postgres/';
my $match ='^postgresql';


# 指定的时间点，例如 2023年3月15日
# 指定的时间点，例如 2023年3月15日
my $year = 2024; # Perl中的年份是从1900开始计算的
my $month = 2; # 月份从1开始计算
my $day = 8;

$month -=1;
# 将指定的时间点转换为UNIX时间戳
my $specified_timestamp = timelocal(0, 0, 0, $day, $month, $year);

# 打开目录
opendir(my $dh, $dir) or die "Cannot open directory: $!";

# 读取目录内的所有文件和目录，排除'.'和'..'
my @files = grep { !/^\.{1,2}$/ } readdir($dh);

# 关闭目录句柄
closedir($dh);

# 过滤出修改时间大于指定时间点的文件
@files = grep {
    my $file_path = "$dir/$_"; # 获取完整的文件路径
    my $mod_time = (stat($file_path))[9]; # 获取文件的最后修改时间（UNIX时间戳）
    $mod_time > $specified_timestamp
} @files;
@files = grep { /${match}/ } @files;
##################################
#输出1S，2S，3S，10S以上的SQL语句
##################################
my $pattern_one = qr/\bduration: 1[0-9]{3}\.\d{0,3} ms\b/; # 设置搜索模式
my $pattern_two = qr/\bduration: 2[0-9]{3}\.\d{0,3} ms\b/; # 设置搜索模式
my $pattern_three = qr/\bduration: 3[0-9]{3}\.\d{0,3} ms\b/; # 设置搜索模式
my $pattern_ten = qr/\bduration: 10[0-9]{3}\.\d{0,3}|\d{5,}\.\d{0,3} ms\b/; # 设置搜索模式
my $outfile_one = 'one.txt'; # 输出文件
my $outfile_two = 'two.txt'; # 输出文件
my $outfile_three = 'three.txt'; # 输出文件
my $outfile_ten = 'ten.txt'; # 输出文件
my $new_destion_dir = '/home/postgres/perl_sql';

my $time_string = strftime "%Y%m%d%H%M%S" , gmtime;
my $save_destion_dir = ${new_destion_dir}.$time_string;
if ( -d $new_destion_dir ) {
  move($new_destion_dir , $save_destion_dir);
}

mkdir "$new_destion_dir" || die "no $!"; 
open(my $out_one, '>', ${new_destion_dir}.'/'.$outfile_one) or die "无法打开文件 'outfile_one' $!";
open(my $out_two, '>', ${new_destion_dir}.'/'.$outfile_two) or die "无法打开文件 'outfile_two' $!";
open(my $out_three, '>', ${new_destion_dir}.'/'.$outfile_three) or die "无法打开文件 'outfile_three' $!";
open(my $out_ten, '>', ${new_destion_dir}.'/'.$outfile_ten) or die "无法打开文件 'outfile_ten' $!";

foreach my $file (@files) {
    # 尝试打开文件
    open my $fh, '<', ${dir}.'/'.$file or do {
        warn "无法打开文件 '$file': $!";
        next; # 如果文件无法打开，则跳过这个文件，继续处理下一个
    };
    
    # 逐行读取文件内容
     while (my $line = <$fh>) {
         $line = $file.$line;
        if ($line =~ /$pattern_one/) {
            print $out_one $line; # 如果匹配，就将行写入输出文件
        } elsif ($line =~ /$pattern_two/) {
			print $out_two $line; # 如果匹配，就将行写入输出文件
		} elsif ($line =~ /$pattern_three/) {
			print $out_three $line; # 如果匹配，就将行写入输出文件
		} elsif ($line =~ /$pattern_ten/) {
			print $out_ten $line; # 如果匹配，就将行写入输出文件
			
		}
    }
    
    # 完成文件处理后关闭文件句柄
    close $fh;
}
close($outfile_one);
close($outfile_two);
close($outfile_three);
close($outfile_ten);
#####################################################
#去重
#####################################################

##################################
#输出1S，2S，3S，10S以上的SQL语句
##################################
##################################
#输出1S，2S，3S，10S以上的SQL语句
##################################
my $infile_one = 'tmp_one.txt'; # 输出文件
my $infile_two = 'tmp_two.txt'; # 输出文件
my $infile_three = 'tmp_three.txt'; # 输出文件
my $infile_ten = 'tmp_ten.txt'; # 输出文件

my $tmp_one = 'tmp_one.txt';
my $tmp_two = 'tmp_two.txt';
my $tmp_three = 'tmp_three.txt';
my $tmp_ten = 'tmp_ten.txt';

$new_destion_dir = '/home/postgres/perl_sql_unique';
my $old_destion_dir = '/home/postgres/perl_sql';

$time_string = strftime "%Y%m%d%H%M%S" , gmtime;
$save_destion_dir = ${new_destion_dir}.$time_string;
if ( -d $new_destion_dir ) {
  move($new_destion_dir , $save_destion_dir);
}

mkdir "$new_destion_dir" || die "no $!"; 

open(my $tmp_out_one, '>', ${new_destion_dir}.'/'.$tmp_one) or die "无法打开文件 'outfile_one' $!";
open(my $tmp_out_two, '>', ${new_destion_dir}.'/'.$tmp_two) or die "无法打开文件 'outfile_two' $!";
open(my $tmp_out_three, '>', ${new_destion_dir}.'/'.$tmp_three) or die "无法打开文件 'outfile_three' $!";
open(my $tmp_out_ten, '>', ${new_destion_dir}.'/'.$tmp_ten) or die "无法打开文件 'outfile_ten' $!";


my $is_patter = 0;
my $sql_query="";
foreach my $file (@files) {
    # 尝试打开文件
    open my $fh, '<', ${dir}.'/'.$file or do {
        warn "无法打开文件 '$file': $!";
        next; # 如果文件无法打开，则跳过这个文件，继续处理下一个
    };
 
    
    # 逐行读取文件内容
     while (my $line = <$fh>) {
         $line = $file.$line;
         if ($line =~ /execute .*?: (SELECT .*?)"/){
          $sql_query = $1;
          } else {
            next;
          } 
     open(my $in_file_one, '<', ${new_destion_dir}.'/'.$infile_one) or die "无法打开文件 'outfile_one' $!";
     open(my $in_file_two, '<', ${new_destion_dir}.'/'.$infile_two) or die "无法打开文件 'outfile_two' $!";
     open(my $in_file_three, '<', ${new_destion_dir}.'/'.$infile_three) or die "无法打开文件 'outfile_three' $!";
     open(my $in_file_ten, '<', ${new_destion_dir}.'/'.$infile_ten) or die "无法打开文件 'outfile_ten' $!";
 
        if ($line =~ /$pattern_one/) {
         #######################################
          $is_patter = 0;
         # print "1";
          while( my $line_one = <$in_file_one> ){
              if ($line_one =~ /\Q$sql_query\E/ ) {
                $is_patter=1;
                          
               }         
                    
             }
           
            if( ! $is_patter){
              print $tmp_out_one $line;
             
             } 
         ###########################################################
            } elsif ($line =~ /$pattern_two/) {
               ########################################
                   $is_patter=0;
                   while( my $line_two = <$in_file_two> ){
                     if ($line_two =~ /\Q$sql_query\E/ ) {
                     $is_patter=1;
                      }
                   }
                if( ! $is_patter){
                  print $tmp_out_two $line;
                }
	###########################################################################	
             } elsif ($line =~ /$pattern_three/) {
		  ################################################
                   $is_patter=0;
                   while( my $line_three = <$in_file_three> ){
                    if ($line_three =~ /\Q$sql_query\E/ ) {
                       $is_patter=1;
                     }
                    }
                    if( ! $is_patter){
                      print $tmp_out_three $line;

                     }

	##############################################################################	
                 } elsif ($line =~ /$pattern_ten/) {
                    $is_patter=0;
                   while( my $line_ten = <$in_file_ten> ){
                    if ($line_ten =~ /\Q$sql_query\E/) {
                     $is_patter=1;
                     }
                   }
              if( ! $is_patter){
                print $tmp_out_ten $line;

               }
	 
			
	}
     ####################################################################  
         close $in_file_one;
	 close $in_file_two;
	 close $in_file_three;
	 close $in_file_ten;
 
 }
    
    # 完成文件处理后关闭文件句柄
    close $fh;
}

close $tmp_out_one;
close $tmp_out_two;
close $tmp_out_three;
close $tmp_out_ten;

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#!/usr/bin/perl
use strict;
use warnings;
#################################
#########去重2####################
################################
use File::Copy;

my $new_destion_dir = '/home/logger/perl_sql_unique';
# 定义原文件和目标文件的映射
my %files_to_copy = (
    'tmp_one.txt' => 'where_one.txt',
    'tmp_two.txt' => 'where_two.txt',
    'tmp_three.txt' => 'where_three.txt',
    'tmp_ten.txt' => 'where_ten.txt',
);

# 遍历每个文件并进行复制
foreach my $source (keys %files_to_copy) {
    my $destination = $files_to_copy{$source};

    # 执行复制操作
    if (copy($new_destion_dir.'/'.$source,$new_destion_dir.'/'.$destination)) {
        print "复制成功: $source -> $destination\n";
    } else {
        print "复制失败: $source -> $destination\n";
    }
}
##################################
#输出1S，2S，3S，10S以上的SQL语句
##################################
my $pattern_one = qr/\bduration: 1[0-9]{3}\.\d{0,3} ms\b/; # 设置搜索模式
my $pattern_two = qr/\bduration: 2[0-9]{3}\.\d{0,3} ms\b/; # 设置搜索模式
my $pattern_three = qr/\bduration: 3[0-9]{3}\.\d{0,3} ms\b/; # 设置搜索模式
my $pattern_ten = qr/\bduration: 10[0-9]{3}\.\d{0,3}|\d{5,}\.\d{0,3} ms\b/; # 设置搜索模式
my $infile_one = 'where_one.txt'; # 输出文件
my $infile_two = 'where_two.txt'; # 输出文件
my $infile_three = 'where_three.txt'; # 输出文件
my $infile_ten = 'where_ten.txt'; # 输出文件

my $tmp_one = 'where_one.txt';
my $tmp_two = 'where_two.txt';
my $tmp_three = 'where_three.txt';
my $tmp_ten = 'where_ten.txt';

open(my $tmp_out_one, '>', ${new_destion_dir}.'/'.$tmp_one) or die "无法打开文件 'outfile_one' $!";
open(my $tmp_out_two, '>', ${new_destion_dir}.'/'.$tmp_two) or die "无法打开文件 'outfile_two' $!";
open(my $tmp_out_three, '>', ${new_destion_dir}.'/'.$tmp_three) or die "无法打开文件 'outfile_three' $!";
open(my $tmp_out_ten, '>', ${new_destion_dir}.'/'.$tmp_ten) or die "无法打开文件 'outfile_ten' $!";

my @files = ('tmp_one.txt','tmp_two.txt','tmp_three.txt','tmp_ten.txt');
my $is_patter = 0;
my $sql_query="";
foreach my $file (@files) {
    # 尝试打开文件
    open my $fh, '<', ${new_destion_dir}.'/'.$file or do {
        warn "无法打开文件 '$file': $!";
        next; # 如果文件无法打开，则跳过这个文件，继续处理下一个
    };
 
    
    # 逐行读取文件内容
     while (my $line = <$fh>) {
         $line = $file.$line;
         if ($line =~ /execute .*?: (SELECT.*?)(?= WHERE).*?"/){
          $sql_query = $1;
          } else {
            next;
          } 
     open(my $in_file_one, '<', ${new_destion_dir}.'/'.$infile_one) or die "无法打开文件 'outfile_one' $!";
     open(my $in_file_two, '<', ${new_destion_dir}.'/'.$infile_two) or die "无法打开文件 'outfile_two' $!";
     open(my $in_file_three, '<', ${new_destion_dir}.'/'.$infile_three) or die "无法打开文件 'outfile_three' $!";
     open(my $in_file_ten, '<', ${new_destion_dir}.'/'.$infile_ten) or die "无法打开文件 'outfile_ten' $!";
 
        if ($line =~ /$pattern_one/) {
         #######################################
          $is_patter = 0;
         # print "1";
          while( my $line_one = <$in_file_one> ){
              if ($line_one =~ /\Q$sql_query\E/ ) {
                $is_patter=1;
                          
               }         
                    
             }
           
            if( ! $is_patter){
              print $tmp_out_one $line;
             
             } 
         ###########################################################
            } elsif ($line =~ /$pattern_two/) {
               ########################################
                   $is_patter=0;
                   while( my $line_two = <$in_file_two> ){
                     if ($line_two =~ /\Q$sql_query\E/ ) {
                     $is_patter=1;
                      }
                   }
                if( ! $is_patter){
                  print $tmp_out_two $line;
                }
	###########################################################################	
             } elsif ($line =~ /$pattern_three/) {
		  ################################################
                   $is_patter=0;
                   while( my $line_three = <$in_file_three> ){
                    if ($line_three =~ /\Q$sql_query\E/ ) {
                       $is_patter=1;
                     }
                    }
                    if( ! $is_patter){
                      print $tmp_out_three $line;

                     }

##############################################################################	
                 } elsif ($line =~ /$pattern_ten/) {
                    $is_patter=0;
                   while( my $line_ten = <$in_file_ten> ){
                    if ($line_ten =~ /\Q$sql_query\E/) {
                     $is_patter=1;
                     }
                   }
              if( ! $is_patter){
                print $tmp_out_ten $line;

               }
	 
			
	}
     ####################################################################  
         close $in_file_one;
	 close $in_file_two;
	 close $in_file_three;
	 close $in_file_ten;
 
 }
    
    # 完成文件处理后关闭文件句柄
    close $fh;
}

close $tmp_out_one;
close $tmp_out_two;
close $tmp_out_three;
close $tmp_out_ten;
---------------------------------------------------------------------------------------------------
#!/usr/bin/perl
use strict;
use warnings;

# Open the log file
sub sum1 {
   my ($filename,$patter) = @_;
open(my $fh, '<', $filename) or die "Could not open file '$filename' $!";

# Initialize total duration
my $total = 0;

# Iterate over each line of the file
while (my $row = <$fh>) {
  chomp $row;
  
  # Match the duration pattern and extract the number of seconds
  if ($row =~ /$patter/) {
    # Add the duration to the total
    $total += $1;
  }
}

# Close the file handle
close($fh);
 return $total;
}
my  $total_duration = 0;
my $file = '';
my $dir = '/data01/tmp/tcserver';
if (@ARGV) {
    $file = $ARGV[0];  # 打印第一个命令行参数
} else {
    print "No arguments provided.\n";
}
my $dirfile = $dir.$file.'syslog';
my $patter = '(\d+\.\d+)\s+secs';
$total_duration += sum1($dir,$patter);

$patter = '(\d+\.\d+)\s+seconds';
$total_duration += sum1($dir,$patter);
print "\n.$total_duration.\n";



