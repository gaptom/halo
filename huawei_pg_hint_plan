tc日志
vim
查看0.001s
\v(\d*\.?\d*|^\d*|\s\d*) seconds|(\d*\.?\d*|^\d*|\s\d*) secs
\v(?<=(^|\s))(\d+(\.\d+)?|\.\d+)\s?(seconds|secs)
\v(?=^|\s)(\d+(\.\d+)?\s(seconds|secs)

查看0.1 seconds以上
\v(0\.[1-9][0-9]{2,}|[1-9][0-9]*\.[0-9]{0,3}|^\d*|\s\d*) seconds|(0\.[1-9][0-9]{2,}|[1-9][0-9]*\.[0-9]{0,3}|^\d*|\s\d*) secs
查看1S以上
\v([1-9]\d{0,}\.\d{0,3}|^\d*|\s\d*) seconds|([1-9]\d{0,}\.\d{0,3}|^\d*|\s\d*) secs
查看2S以上
\v(2\.\d{0,3}|[3-9]\d*\.\d{0,3}|\d{2,}\.\d{0,3}|^\d*|\s\d*) seconds|(2\.\d{0,3}|[3-9]\d*\.\d{0,3}|\d{2,}\.\d{0,3}|^\d*|\s\d*) secs
查看3S以上
\v(3\.\d{0,3}|[4-9]\d*\.\d{0,3}|\d{2,}\.\d{0,3}|^\d*|\s\d*) seconds|(3\.\d{0,3}|[4-9]\d*\.\d{0,3}|\d{2,}\.\d{0,3}|^\d*|\s\d*) secs
查看10S以上
\v(10\.{0,3}\b|[1-9][0-9]\d*\.\d{0,3}|\d{3,}\.\d{0,3}|^\d*|\s\d*) seconds|(10\.{0,3}\b|[1-9][0-9]\d*\.\d{0,3}|\d{3,}\.\d{0,3}|^\d*|\s\d*) secs

#!/usr/bin/perl
use strict;
use warnings;
use DateTime;
use POSIX qw(strftime);
use File::Copy "move";
# 指定目录路径
my $dir = '/pgdata/pgsql/log';
my $destion_dir = '/home/postgres/';
my $match ='^postgresql';


# 指定的时间点，例如 2023年3月15日
# 指定的时间点，例如 2023年3月15日
my $year = 2024; # Perl中的年份是从1900开始计算的
my $month = 2; # 月份从1开始计算
my $day = 8;

$month -=1;
# 将指定的时间点转换为UNIX时间戳
my $specified_timestamp = timelocal(0, 0, 0, $day, $month, $year);

# 打开目录
opendir(my $dh, $dir) or die "Cannot open directory: $!";

# 读取目录内的所有文件和目录，排除'.'和'..'
my @files = grep { !/^\.{1,2}$/ } readdir($dh);

# 关闭目录句柄
closedir($dh);

# 过滤出修改时间大于指定时间点的文件
@files = grep {
    my $file_path = "$dir/$_"; # 获取完整的文件路径
    my $mod_time = (stat($file_path))[9]; # 获取文件的最后修改时间（UNIX时间戳）
    $mod_time > $specified_timestamp
} @files;
@files = grep { /${match}/ } @files;
##################################
#输出1S，2S，3S，10S以上的SQL语句
##################################
my $pattern_one = qr/\bduration: 1[0-9]{3}\.\d{0,3} ms\b/; # 设置搜索模式
my $pattern_two = qr/\bduration: 2[0-9]{3}\.\d{0,3} ms\b/; # 设置搜索模式
my $pattern_three = qr/\bduration: 3[0-9]{3}\.\d{0,3} ms\b/; # 设置搜索模式
my $pattern_ten = qr/\bduration: 10[0-9]{3}\.\d{0,3}|\d{5,}\.\d{0,3} ms\b/; # 设置搜索模式
my $outfile_one = 'one.txt'; # 输出文件
my $outfile_two = 'two.txt'; # 输出文件
my $outfile_three = 'three.txt'; # 输出文件
my $outfile_ten = 'ten.txt'; # 输出文件
my $new_destion_dir = '/home/postgres/perl_sql';

my $time_string = strftime "%Y%m%d%H%M%S" , gmtime;
my $save_destion_dir = ${new_destion_dir}.$time_string;
if ( -d $new_destion_dir ) {
  move($new_destion_dir , $save_destion_dir);
}

mkdir "$new_destion_dir" || die "no $!"; 
open(my $out_one, '>', ${new_destion_dir}.'/'.$outfile_one) or die "无法打开文件 'outfile_one' $!";
open(my $out_two, '>', ${new_destion_dir}.'/'.$outfile_two) or die "无法打开文件 'outfile_two' $!";
open(my $out_three, '>', ${new_destion_dir}.'/'.$outfile_three) or die "无法打开文件 'outfile_three' $!";
open(my $out_ten, '>', ${new_destion_dir}.'/'.$outfile_ten) or die "无法打开文件 'outfile_ten' $!";

foreach my $file (@files) {
    # 尝试打开文件
    open my $fh, '<', ${dir}.'/'.$file or do {
        warn "无法打开文件 '$file': $!";
        next; # 如果文件无法打开，则跳过这个文件，继续处理下一个
    };
    
    # 逐行读取文件内容
     while (my $line = <$fh>) {
         $line = $file.$line;
        if ($line =~ /$pattern_one/) {
            print $out_one $line; # 如果匹配，就将行写入输出文件
        } elsif ($line =~ /$pattern_two/) {
			print $out_two $line; # 如果匹配，就将行写入输出文件
		} elsif ($line =~ /$pattern_three/) {
			print $out_three $line; # 如果匹配，就将行写入输出文件
		} elsif ($line =~ /$pattern_ten/) {
			print $out_ten $line; # 如果匹配，就将行写入输出文件
			
		}
    }
    
    # 完成文件处理后关闭文件句柄
    close $fh;
}
close($outfile_one);
close($outfile_two);
close($outfile_three);
close($outfile_ten);
#####################################################
#去重
#####################################################

##################################
#输出1S，2S，3S，10S以上的SQL语句
##################################
##################################
#输出1S，2S，3S，10S以上的SQL语句
##################################
my $infile_one = 'tmp_one.txt'; # 输出文件
my $infile_two = 'tmp_two.txt'; # 输出文件
my $infile_three = 'tmp_three.txt'; # 输出文件
my $infile_ten = 'tmp_ten.txt'; # 输出文件

my $tmp_one = 'tmp_one.txt';
my $tmp_two = 'tmp_two.txt';
my $tmp_three = 'tmp_three.txt';
my $tmp_ten = 'tmp_ten.txt';

$new_destion_dir = '/home/postgres/perl_sql_unique';
my $old_destion_dir = '/home/postgres/perl_sql';

$time_string = strftime "%Y%m%d%H%M%S" , gmtime;
$save_destion_dir = ${new_destion_dir}.$time_string;
if ( -d $new_destion_dir ) {
  move($new_destion_dir , $save_destion_dir);
}

mkdir "$new_destion_dir" || die "no $!"; 

open(my $tmp_out_one, '>', ${new_destion_dir}.'/'.$tmp_one) or die "无法打开文件 'outfile_one' $!";
open(my $tmp_out_two, '>', ${new_destion_dir}.'/'.$tmp_two) or die "无法打开文件 'outfile_two' $!";
open(my $tmp_out_three, '>', ${new_destion_dir}.'/'.$tmp_three) or die "无法打开文件 'outfile_three' $!";
open(my $tmp_out_ten, '>', ${new_destion_dir}.'/'.$tmp_ten) or die "无法打开文件 'outfile_ten' $!";


my $is_patter = 0;
my $sql_query="";
foreach my $file (@files) {
    # 尝试打开文件
    open my $fh, '<', ${dir}.'/'.$file or do {
        warn "无法打开文件 '$file': $!";
        next; # 如果文件无法打开，则跳过这个文件，继续处理下一个
    };
 
    
    # 逐行读取文件内容
     while (my $line = <$fh>) {
         $line = $file.$line;
         if ($line =~ /execute .*?: (SELECT .*?)"/){
          $sql_query = $1;
          } else {
            next;
          } 
     open(my $in_file_one, '<', ${new_destion_dir}.'/'.$infile_one) or die "无法打开文件 'outfile_one' $!";
     open(my $in_file_two, '<', ${new_destion_dir}.'/'.$infile_two) or die "无法打开文件 'outfile_two' $!";
     open(my $in_file_three, '<', ${new_destion_dir}.'/'.$infile_three) or die "无法打开文件 'outfile_three' $!";
     open(my $in_file_ten, '<', ${new_destion_dir}.'/'.$infile_ten) or die "无法打开文件 'outfile_ten' $!";
 
        if ($line =~ /$pattern_one/) {
         #######################################
          $is_patter = 0;
         # print "1";
          while( my $line_one = <$in_file_one> ){
              if ($line_one =~ /\Q$sql_query\E/ ) {
                $is_patter=1;
                          
               }         
                    
             }
           
            if( ! $is_patter){
              print $tmp_out_one $line;
             
             } 
         ###########################################################
            } elsif ($line =~ /$pattern_two/) {
               ########################################
                   $is_patter=0;
                   while( my $line_two = <$in_file_two> ){
                     if ($line_two =~ /\Q$sql_query\E/ ) {
                     $is_patter=1;
                      }
                   }
                if( ! $is_patter){
                  print $tmp_out_two $line;
                }
	###########################################################################	
             } elsif ($line =~ /$pattern_three/) {
		  ################################################
                   $is_patter=0;
                   while( my $line_three = <$in_file_three> ){
                    if ($line_three =~ /\Q$sql_query\E/ ) {
                       $is_patter=1;
                     }
                    }
                    if( ! $is_patter){
                      print $tmp_out_three $line;

                     }

	##############################################################################	
                 } elsif ($line =~ /$pattern_ten/) {
                    $is_patter=0;
                   while( my $line_ten = <$in_file_ten> ){
                    if ($line_ten =~ /\Q$sql_query\E/) {
                     $is_patter=1;
                     }
                   }
              if( ! $is_patter){
                print $tmp_out_ten $line;

               }
	 
			
	}
     ####################################################################  
         close $in_file_one;
	 close $in_file_two;
	 close $in_file_three;
	 close $in_file_ten;
 
 }
    
    # 完成文件处理后关闭文件句柄
    close $fh;
}

close $tmp_out_one;
close $tmp_out_two;
close $tmp_out_three;
close $tmp_out_ten;

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#!/usr/bin/perl
use strict;
use warnings;
#################################
#########去重2####################
################################
use File::Copy;

my $new_destion_dir = '/home/logger/perl_sql_unique';
# 定义原文件和目标文件的映射
my %files_to_copy = (
    'tmp_one.txt' => 'where_one.txt',
    'tmp_two.txt' => 'where_two.txt',
    'tmp_three.txt' => 'where_three.txt',
    'tmp_ten.txt' => 'where_ten.txt',
);

# 遍历每个文件并进行复制
foreach my $source (keys %files_to_copy) {
    my $destination = $files_to_copy{$source};

    # 执行复制操作
    if (copy($new_destion_dir.'/'.$source,$new_destion_dir.'/'.$destination)) {
        print "复制成功: $source -> $destination\n";
    } else {
        print "复制失败: $source -> $destination\n";
    }
}
##################################
#输出1S，2S，3S，10S以上的SQL语句
##################################
my $pattern_one = qr/\bduration: 1[0-9]{3}\.\d{0,3} ms\b/; # 设置搜索模式
my $pattern_two = qr/\bduration: 2[0-9]{3}\.\d{0,3} ms\b/; # 设置搜索模式
my $pattern_three = qr/\bduration: 3[0-9]{3}\.\d{0,3} ms\b/; # 设置搜索模式
my $pattern_ten = qr/\bduration: 10[0-9]{3}\.\d{0,3}|\d{5,}\.\d{0,3} ms\b/; # 设置搜索模式
my $infile_one = 'where_one.txt'; # 输出文件
my $infile_two = 'where_two.txt'; # 输出文件
my $infile_three = 'where_three.txt'; # 输出文件
my $infile_ten = 'where_ten.txt'; # 输出文件

my $tmp_one = 'where_one.txt';
my $tmp_two = 'where_two.txt';
my $tmp_three = 'where_three.txt';
my $tmp_ten = 'where_ten.txt';

open(my $tmp_out_one, '>', ${new_destion_dir}.'/'.$tmp_one) or die "无法打开文件 'outfile_one' $!";
open(my $tmp_out_two, '>', ${new_destion_dir}.'/'.$tmp_two) or die "无法打开文件 'outfile_two' $!";
open(my $tmp_out_three, '>', ${new_destion_dir}.'/'.$tmp_three) or die "无法打开文件 'outfile_three' $!";
open(my $tmp_out_ten, '>', ${new_destion_dir}.'/'.$tmp_ten) or die "无法打开文件 'outfile_ten' $!";

my @files = ('tmp_one.txt','tmp_two.txt','tmp_three.txt','tmp_ten.txt');
my $is_patter = 0;
my $sql_query="";
foreach my $file (@files) {
    # 尝试打开文件
    open my $fh, '<', ${new_destion_dir}.'/'.$file or do {
        warn "无法打开文件 '$file': $!";
        next; # 如果文件无法打开，则跳过这个文件，继续处理下一个
    };
 
    
    # 逐行读取文件内容
     while (my $line = <$fh>) {
         $line = $file.$line;
         if ($line =~ /execute .*?: (SELECT.*?)(?= WHERE).*?"/){
          $sql_query = $1;
          } else {
            next;
          } 
     open(my $in_file_one, '<', ${new_destion_dir}.'/'.$infile_one) or die "无法打开文件 'outfile_one' $!";
     open(my $in_file_two, '<', ${new_destion_dir}.'/'.$infile_two) or die "无法打开文件 'outfile_two' $!";
     open(my $in_file_three, '<', ${new_destion_dir}.'/'.$infile_three) or die "无法打开文件 'outfile_three' $!";
     open(my $in_file_ten, '<', ${new_destion_dir}.'/'.$infile_ten) or die "无法打开文件 'outfile_ten' $!";
 
        if ($line =~ /$pattern_one/) {
         #######################################
          $is_patter = 0;
         # print "1";
          while( my $line_one = <$in_file_one> ){
              if ($line_one =~ /\Q$sql_query\E/ ) {
                $is_patter=1;
                          
               }         
                    
             }
           
            if( ! $is_patter){
              print $tmp_out_one $line;
             
             } 
         ###########################################################
            } elsif ($line =~ /$pattern_two/) {
               ########################################
                   $is_patter=0;
                   while( my $line_two = <$in_file_two> ){
                     if ($line_two =~ /\Q$sql_query\E/ ) {
                     $is_patter=1;
                      }
                   }
                if( ! $is_patter){
                  print $tmp_out_two $line;
                }
	###########################################################################	
             } elsif ($line =~ /$pattern_three/) {
		  ################################################
                   $is_patter=0;
                   while( my $line_three = <$in_file_three> ){
                    if ($line_three =~ /\Q$sql_query\E/ ) {
                       $is_patter=1;
                     }
                    }
                    if( ! $is_patter){
                      print $tmp_out_three $line;

                     }

##############################################################################	
                 } elsif ($line =~ /$pattern_ten/) {
                    $is_patter=0;
                   while( my $line_ten = <$in_file_ten> ){
                    if ($line_ten =~ /\Q$sql_query\E/) {
                     $is_patter=1;
                     }
                   }
              if( ! $is_patter){
                print $tmp_out_ten $line;

               }
	 
			
	}
     ####################################################################  
         close $in_file_one;
	 close $in_file_two;
	 close $in_file_three;
	 close $in_file_ten;
 
 }
    
    # 完成文件处理后关闭文件句柄
    close $fh;
}

close $tmp_out_one;
close $tmp_out_two;
close $tmp_out_three;
close $tmp_out_ten;
---------------------------------------------------------------------------------------------------

#!/usr/bin/perl
use strict;
use warnings;
use Fcntl ':flock', 'O_RDONLY', 'O_WRONLY', 'O_CREAT'; # Example for importing multiple constants

# Open the log file
sub sum {
my ($filename,$patter) = @_;
#open(my $fh, '<', $filename) or die "Could not open file '$filename' $!";
sysopen(my $fh, $filename, O_RDONLY) or die "Could not open file '$filename' $!";
# Initialize total duration
my $total = 0; #统计汇总时间
my $rows = 0;  #统计执行的行数
my $start_capture = 0; #开始捕获
# Iterate over each line of the file
while (my $row = <$fh>) {
  chomp $row;
  #start capture
  if( $row =~ /debug on/i){
	$start_capture = 1;
  }
  # Match the duration pattern and extract the number of seconds
  if ($row =~ /$patter/ && $start_capture) {
    # Add the duration to the total
    $total += $1;
	$rows++;
    #print "$total"."\n";
  }
}

# Close the file handle
close($fh);
 return ($total,$rows);
}
my  $total_duration = 0;
my $file = '';
my $dir = '/home/postgres/test/';
if (@ARGV) {
    $file = $ARGV[0];  # 打印第一个命令行参数
} else {
    print "No arguments provided.\n";
}

my $dirfile = $dir.$file.'.txt';
my $patter = 'qr/(\d*\.\d*|^\d*|\s\d*) secs/';
($total_duration,$rows) += sum($dirfile,$patter);
print "sql语句执行记录数:$rows"."\n";
print "执行此场景的总时间:$total_duration"."\n";




日志抓取

http://7.185.175.58:8083/mgmt/console/
1.登陆http://7.185.175.58:8083/mgmt/console/ 
2.点击左侧TC Server，Assigned User输入用户账号，点击Search
3.会搜索出这个用户下所有的日志号，对比用户提供的日志号
4.找到对应的PID，选中，将下面的4个框选中
5.再找用户重新执行一次
这样子的日志才是详细日志，才能分析出问题   

#!/usr/bin/perl
use strict;
use warnings;
use Fcntl ':flock', 'O_RDONLY', 'O_WRONLY', 'O_CREAT'; # Example for importing multiple constants

# Open the log file
sub remove_duplicate_sql {
    my ($input_file, $output_file,$patter) = @_;

    # 打开输入文件进行读取，打开输出文件进行写入
    open my $in, '<', $input_file or die "无法打开输入文件: $!";
    open my $out, '>', $output_file or die "无法打开输出文件: $!";

    # 用于跟踪已见过的SQL语句
    my %seen;

    while (my $line = <$in>) {
        # 正则表达式匹配 SELECT 到 WHERE 之间的语句
        if ($line =~ /${patter}/) {
            my $sql = $1;
            # 去除末尾的 WHERE 以匹配题目要求
            $sql =~ s/ WHERE$//;
            
            # 检查是否已经处理过这个SQL语句
            unless ($seen{$sql}++) ;
        }
    }
	my @unique = keys %seen;
	my @sorted = sort @unique;
	$" = "\n";
    print $out "@sorted";
    # 关闭文件句柄
    close $in;
    close $out;
    
}
sub sum {
my ($filename,$patter,$destion_file) = @_;
#open(my $fh, '<', $filename) or die "Could not open file '$filename' $!";
sysopen(my $fh, $filename, O_RDONLY) or die "Could not open file '$filename' $!";
open my $out, '>', $destion_file or die "无法打开输出文件: $!";
# Initialize total duration
my $total = 0; #统计汇总时间
my $rows = 0;  #统计执行的行数
my $start_capture = 0; #开始捕获
# Iterate over each line of the file
while (my $row = <$fh>) {
  chomp $row;
  #start capture
  if( $row =~ /debug on/i){
	$start_capture = 1;
  }
  # Match the duration pattern and extract the number of seconds
  if ($row =~ /$patter/ && $start_capture) {
    # Add the duration to the total
    $total += $1;
	$rows++;
    print $out "$1\n";
  }
}

# Close the file handle
close($fh);
 return ($total,$rows);
}
my  $total_duration = 0;
my $file = '';
my $source_dir = '/root/';
if (@ARGV) {
    $file = $ARGV[0];  # 打印第一个命令行参数
} else {
    print "No arguments provided.\n";
}
my $destion_dir= '/root/'
my $destion_file= "$destion_dir.time\.txt"  #sql语句执行时间
my $distinct_destion_file="$destion_dir.distinct_time\.txt"
my $source_file = $dir.$file;
my $patter = qr/(\d*\.\d*|^\d*|\s\d*) secs/;
my $match = qr/(\d*\.\d*|^\d*|\s\d*)/;
#sql语句执行时间文件名为：$destion_dir.time.txt
($total_duration,$rows) = sum($source_file,$patter,$destion_file);
#sql语句去重，并且排序
 remove_duplicate_sql($destion_file, $distinct_destion_file, $match);

print "sql语句执行记录数:$rows"."\n";
print "执行此场景的总时间:$total_duration"."\n";

===========================================================
#!/usr/bin/perl
use strict;
use warnings;
use Time::Local;
use POSIX qw(strftime);
use File::Basename;

# 打开文件
sub sorttime{
	my ($filesource,$sortfile) = @_;
	my @lines;
	open(my $in, '<', $filesource) or die "无法打开文件 '$filesource' $!";
    open(my $out,'>',$sortfile) or die "无法打开文件 '$sortfile' $!";
    while (my $line = <$in>) {
      chomp($line);
	  push @lines,$line;	  
	}
	my @sorted_data = sort {
		my $last_field_a = (split ' ', $a)[-1];
		my $last_field_b = (split ' ', $b)[-1];
        $last_field_b <=> $last_field_a
	} @lines;
	$" = "\n";
	print $out "@sorted_data"."\n";
}	

sub parse_time {
    my ($year, $month, $day, $hour, $min, $sec) =@_ ;
    $month -= 1; # 月份从0开始计数
    my $time = timelocal($sec, $min, $hour, $day, $month, $year);
    #print "$year $month $day $hour $min $sec"."\n";
    return $time;
}
sub capture {
	#抓取start和end中间一段
my ($filesource,$filedestion,$start1,$start2,$end1,$end2) = @_;
#print "$start"."\n"."$end";
open(my $in, '<', $filesource) or die "无法打开文件 '$filesource' $!";
open(my $out,'>',$filedestion) or die "无法打开文件 '$filedestion' $!";

# 读取文件并捕获特定的文本块
my $capture = 0; #表示进入开始捕获状态
my $time_start = 0;
my $time_end =0;
my $status = 0; #0未开始状态 1第一种start1 2第二种状态start2
my $rows;
while (my $line = <$in>) {

    if ($line =~ /$start1/i or $line =~ /$start2/i) {
        $capture = 1;
		#捕获开始时间
		if($line =~ /$start1/i ){
		  $status = 1;
		  my ($year,$month,$day,$hour,$min,$sec) = ($1,$2,$3,$4,$5,$6);
          $time_start = parse_time($year,$month,$day,$hour,$min,$sec); 
          my $date_time= strftime "%Y-%m-%d %H:%M:%S",localtime($time_start);
          $rows = "$date_time  ";
        }elsif($line =~ /$start2/i){
		  $status = 2;
		  my ($year,$month,$day,$hour,$min,$sec) = ($1,$2,$3,$4,$5,$6);
          $time_start = parse_time($year,$month,$day,$hour,$min,$sec); 
          my $date_time= strftime "%Y-%m-%d %H:%M:%S",localtime($time_start);
          $rows = "$date_time  ";
          #print $line;
		}
		
    }
    if ($capture && $status == 1  ) {
    	#捕获结束时间
    	if($line =~ /$end1/i){
		my ($year,$month,$day,$hour,$min,$sec) = ($1,$2,$3,$4,$5,$6);
		$time_end = parse_time($year,$month,$day,$hour,$min,$sec);
        my $date_time=strftime "%Y-%m-%d %H:%M:%S",localtime($time_end);
		my $time = $time_end - $time_start;
		print $out "$rows"."$date_time  "."$time"."\n";
		$time_start = 0;
	    $time_end =0;
	    $capture = 0;
	    $status = 0;
       }
    }elsif($capture && $status == 2){
    	if($line =~ /$end2/i){
		my ($year,$month,$day,$hour,$min,$sec) = ($1,$2,$3,$4,$5,$6);
		$time_end = parse_time($year,$month,$day,$hour,$min,$sec);
        my $date_time=strftime "%Y-%m-%d %H:%M:%S",localtime($time_end);
		my $time = $time_end - $time_start;
		print $out "$rows"."$date_time  "."$time"."\n";
		#print $line;
		$time_start = 0;
	    $time_end =0;
	    $capture = 0;
	    $status = 0;
	   }
	}
  }

close $in;
close $out;
my $dir = dirname($filedestion);
my $sortfile = $dir.'/sortinterval.txt';
sorttime($filedestion,$sortfile);
return 0;
}

my $start1=qr/startTime==(\d{4})\/(\d{2})\/(\d{2})-(\d{2}):(\d{2}):(\d{2})/;
my $end1=qr/endTime==(\d{4})\/(\d{2})\/(\d{2})-(\d{2}):(\d{2}):(\d{2})/;
my $start2=qr/\[(\d{4})-(\d{2})-(\d{2})\s(\d{2}):(\d{2}):(\d{2})+\.(\d+)\]\s.*?\s[Ss]tart/;
my $end2=qr/\[(\d{4})-(\d{2})-(\d{2})\s(\d{2}):(\d{2}):(\d{2})+\.(\d+)\]\s.*?\s[Ee]nd/;

my $dir = '/root/';
my $filename = 'log.txt';
my $suorce_file = $dir.$filename;
my $destion_file = $dir.'timeinterval.txt';
capture($suorce_file,$destion_file,$start1,$start2,$end1,$end2);
==================================================================================================
#!/usr/bin/perl
use strict;
use warnings;
use Fcntl ':flock', 'O_RDONLY', 'O_WRONLY', 'O_CREAT'; # Example for importing multiple constants
use POSIX qw(strftime);
use File::Basename;
use Time::Local;

my $destion_dir= '/root/';
my $source_dir = '/root/';
sub remove_duplicate_sql{
    my ($input_file, $output_file,$patter) = @_;

    # 打开输入文件进行读取，打开输出文件进行写入
    open my $in, '<', $input_file or die "无法打开输入文件: $!";
    open my $out, '>', $output_file or die "无法打开输出文件: $!";

    # 用于跟踪已见过的SQL语句
    my %seen;

    while (my $line = <$in>) {
        # 正则表达式匹配 SELECT 到 WHERE 之间的语句
        if ($line =~ /${patter}/) {
            my $sql = $1;
            # 去除末尾的 WHERE 以匹配题目要求
            $sql =~ s/ WHERE$//;
            
            # 检查是否已经处理过这个SQL语句
            unless ($seen{$sql}++) {;};
        }
    }
	my @unique = keys %seen;
	my @sorted = sort { $b <=> $a } @unique;
	$" = "\n";
    print $out "@sorted";
    # 关闭文件句柄
    close $in;
    close $out;
    
}
sub sum {
my ($filename,$patter,$destion_file) = @_;
#open(my $fh, '<', $filename) or die "Could not open file '$filename' $!";
sysopen(my $fh, $filename, O_RDONLY) or die "Could not open file '$filename' $!";
open my $out, '>', $destion_file or die "无法打开输出文件: $!";
# Initialize total duration
my $total = 0; #统计汇总时间
my $rows = 0;  #统计执行的行数
my $start_capture = 0; #开始捕获
# Iterate over each line of the file
while (my $row = <$fh>) {
  chomp $row;
  #start capture
  if( $row =~ /debug on/i){
	$start_capture = 1;
  }
  # Match the duration pattern and extract the number of seconds
  if ($row =~ /$patter/ && $start_capture) {
    # Add the duration to the total
    $total += $1;
	$rows++;
    print $out "$1\n";
  }
}

# Close the file handle
close($fh);
 return ($total,$rows);
}
my  $total_duration = 0;
my  $rows = 0;
my $file = '';
if (@ARGV) {
    $file = $ARGV[0];  # 打印第一个命令行参数
} else {
    print "No arguments provided.\n";
}
#######################################
###################timeinterval#######
#####################################
sub sorttime{
	my ($filesource,$sortfile) = @_;
	my @lines;
	open(my $in, '<', $filesource) or die "无法打开文件 '$filesource' $!";
    open(my $out,'>',$sortfile) or die "无法打开文件 '$sortfile' $!";
    while (my $line = <$in>) {
      chomp($line);
	  push @lines,$line;	  
	}
	my @sorted_data = sort {
		my $last_field_a = (split ' ', $a)[-1];
		my $last_field_b = (split ' ', $b)[-1];
        $last_field_b <=> $last_field_a
	} @lines;
	$" = "\n";
	print $out "@sorted_data"."\n";
}	

sub parse_time {
    my ($year, $month, $day, $hour, $min, $sec) =@_ ;
    $month -= 1; # 月份从0开始计数
    my $time = timelocal($sec, $min, $hour, $day, $month, $year);
    #print "$year $month $day $hour $min $sec"."\n";
    return $time;
}
sub capture {
	#抓取start和end中间一段
my ($filesource,$filedestion,$start1,$start2,$end1,$end2) = @_;
#print "$start"."\n"."$end";
open(my $in, '<', $filesource) or die "无法打开文件 '$filesource' $!";
open(my $out,'>',$filedestion) or die "无法打开文件 '$filedestion' $!";

# 读取文件并捕获特定的文本块
my $capture = 0; #表示进入开始捕获状态
my $time_start = 0;
my $time_end =0;
my $status = 0; #0未开始状态 1第一种start1 2第二种状态start2
my $rows;
while (my $line = <$in>) {

    if ($line =~ /$start1/i or $line =~ /$start2/i) {
        $capture = 1;
		#捕获开始时间
		if($line =~ /$start1/i ){
		  $status = 1;
		  my ($year,$month,$day,$hour,$min,$sec) = ($1,$2,$3,$4,$5,$6);
          $time_start = parse_time($year,$month,$day,$hour,$min,$sec); 
          my $date_time= strftime "%Y-%m-%d %H:%M:%S",localtime($time_start);
          $rows = "$date_time  ";
        }elsif($line =~ /$start2/i){
		  $status = 2;
		  my ($year,$month,$day,$hour,$min,$sec) = ($1,$2,$3,$4,$5,$6);
          $time_start = parse_time($year,$month,$day,$hour,$min,$sec); 
          my $date_time= strftime "%Y-%m-%d %H:%M:%S",localtime($time_start);
          $rows = "$date_time  ";
          #print $line;
		}
		
    }
    if ($capture && $status == 1  ) {
    	#捕获结束时间
    	if($line =~ /$end1/i){
		my ($year,$month,$day,$hour,$min,$sec) = ($1,$2,$3,$4,$5,$6);
		$time_end = parse_time($year,$month,$day,$hour,$min,$sec);
        my $date_time=strftime "%Y-%m-%d %H:%M:%S",localtime($time_end);
		my $time = $time_end - $time_start;
		print $out "$rows"."$date_time  "."$time"."\n";
		$time_start = 0;
	    $time_end =0;
	    $capture = 0;
	    $status = 0;
       }
    }elsif($capture && $status == 2){
    	if($line =~ /$end2/i){
		my ($year,$month,$day,$hour,$min,$sec) = ($1,$2,$3,$4,$5,$6);
		$time_end = parse_time($year,$month,$day,$hour,$min,$sec);
        my $date_time=strftime "%Y-%m-%d %H:%M:%S",localtime($time_end);
		my $time = $time_end - $time_start;
		print $out "$rows"."$date_time  "."$time"."\n";
		#print $line;
		$time_start = 0;
	    $time_end =0;
	    $capture = 0;
	    $status = 0;
	   }
	}
  }

close $in;
close $out;
my $dir = dirname($filedestion);
my $sortfile = $dir.'/sortinterval.txt';
sorttime($filedestion,$sortfile);
return 0;
}

################
my $destion_file= $destion_dir.'time.txt';  #sql语句执行时间
my $distinct_destion_file=$destion_dir.'distinct_time.txt';
my $source_file = $source_dir.$file;
my $patter = qr/(\d*\.\d*|^\d*|\s\d*) secs/;
my $match = qr/(\d*\.\d*|^\d*|\s\d*)/;
#sql语句执行时间文件名为：$destion_dir.time.txt
($total_duration,$rows) = sum($source_file,$patter,$destion_file);
#sql语句去重，并且排序
 remove_duplicate_sql($destion_file, $distinct_destion_file, $match);

print "sql语句执行记录数:$rows"."\n";
print "执行此场景的总时间:$total_duration"."\n";

###########################################################################################
my $start1=qr/startTime==(\d{4})\/(\d{2})\/(\d{2})-(\d{2}):(\d{2}):(\d{2})/;
my $end1=qr/endTime==(\d{4})\/(\d{2})\/(\d{2})-(\d{2}):(\d{2}):(\d{2})/;
my $start2=qr/\[(\d{4})-(\d{2})-(\d{2})\s(\d{2}):(\d{2}):(\d{2})+\.(\d+)\]\s.*?\s[Ss]tart/;
my $end2=qr/\[(\d{4})-(\d{2})-(\d{2})\s(\d{2}):(\d{2}):(\d{2})+\.(\d+)\]\s.*?\s[Ee]nd/;

my $suorcetime_file = $destion_dir.$file;
my $destiontime_file = $destion_dir.'timeinterval.txt';
capture($suorcetime_file,$destiontime_file,$start1,$start2,$end1,$end2);
